// Generated by purs bundle 0.11.7
var PS = {};
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];                         
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Milliseconds = function (x) {
      return x;
  };
  exports["Milliseconds"] = Milliseconds;
})(PS["Data.Time.Duration"] = PS["Data.Time.Duration"] || {});
(function(exports) {
    "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.sqrt = Math.sqrt;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["sqrt"] = $foreign.sqrt;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
    "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];        
  var Vect = (function () {
      function Vect(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Vect.create = function (value0) {
          return function (value1) {
              return new Vect(value0, value1);
          };
      };
      return Vect;
  })();
  var vLength = function (v) {
      return $$Math.sqrt(v.value0 * v.value0 + v.value1 * v.value1);
  };
  var vDiff = function (v) {
      return function (v1) {
          return new Vect(v.value0 - v1.value0, v.value1 - v1.value1);
      };
  };
  var vAdd = function (v) {
      return function (v1) {
          return new Vect(v.value0 + v1.value0, v.value1 + v1.value1);
      };
  };
  var scalMul = function (s) {
      return function (v) {
          return new Vect(s * v.value0, s * v.value1);
      };
  }; 
  var dist = function (v1) {
      return function (v2) {
          return vLength(vDiff(v1)(v2));
      };
  };
  var isNear = function (v1) {
      return function (v2) {
          return dist(v1)(v2) <= 1.0e-3;
      };
  };
  var direction = function (v1) {
      return function (v2) {
          var dir = vDiff(v2)(v1);
          return scalMul(1.0 / vLength(dir))(dir);
      };
  };
  exports["Vect"] = Vect;
  exports["direction"] = direction;
  exports["isNear"] = isNear;
  exports["dist"] = dist;
  exports["vAdd"] = vAdd;
  exports["vDiff"] = vDiff;
  exports["scalMul"] = scalMul;
  exports["vLength"] = vLength;
})(PS["Vect"] = PS["Vect"] || {});
(function(exports) {
    "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Function = PS["Data.Function"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Prelude = PS["Prelude"];
  var Vect = PS["Vect"];        
  var Static = (function () {
      function Static(value0) {
          this.value0 = value0;
      };
      Static.create = function (value0) {
          return new Static(value0);
      };
      return Static;
  })();
  var Animated = (function () {
      function Animated(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Animated.create = function (value0) {
          return function (value1) {
              return new Animated(value0, value1);
          };
      };
      return Animated;
  })();
  var HasPos = function (getPos, setPos) {
      this.getPos = getPos;
      this.setPos = setPos;
  };
  var setPos = function (dict) {
      return dict.setPos;
  };
  var isMoving = function (v) {
      if (v instanceof Static) {
          return false;
      };
      if (v instanceof Animated) {
          return true;
      };
      throw new Error("Failed pattern match at Anim line 46, column 1 - line 46, column 41: " + [ v.constructor.name ]);
  };
  var initStatic = Static.create;
  var getPos = function (dict) {
      return dict.getPos;
  };
  var getX = function (dictHasPos) {
      return function (a) {
          var v = getPos(dictHasPos)(a);
          return v.value0;
      };
  };
  var getY = function (dictHasPos) {
      return function (a) {
          var v = getPos(dictHasPos)(a);
          return v.value1;
      };
  };
  var current = function (v) {
      if (v instanceof Static) {
          return v.value0;
      };
      if (v instanceof Animated) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Anim line 41, column 1 - line 41, column 34: " + [ v.constructor.name ]);
  };
  var moveTo = function (dictHasPos) {
      return function (speed) {
          return function (toPos) {
              return function (anim) {
                  if (Vect.isNear(getPos(dictHasPos)(current(anim)))(toPos)) {
                      var obj = current(anim);
                      return new Static(obj);
                  };
                  if (Data_Boolean.otherwise) {
                      var obj = current(anim);
                      var moveTo1 = function (curObj) {
                          return function (lastDir) {
                              return function (v) {
                                  var nextPos = Vect.vAdd(getPos(dictHasPos)(curObj))(Vect.scalMul(v * speed)(lastDir));
                                  var nextObj = setPos(dictHasPos)(nextPos)(curObj);
                                  var newDir = Vect.direction(nextPos)(toPos);
                                  var $31 = Vect.isNear(newDir)(lastDir);
                                  if ($31) {
                                      return new Animated(nextObj, moveTo1(nextObj)(lastDir));
                                  };
                                  return new Static(setPos(dictHasPos)(toPos)(curObj));
                              };
                          };
                      };
                      return new Animated(obj, moveTo1(obj)(Vect.direction(getPos(dictHasPos)(obj))(toPos)));
                  };
                  throw new Error("Failed pattern match at Anim line 60, column 1 - line 60, column 66: " + [ speed.constructor.name, toPos.constructor.name, anim.constructor.name ]);
              };
          };
      };
  };
  var animate = function (dictHasPos) {
      return function (v) {
          return function (v1) {
              if (v1 instanceof Static) {
                  return v1;
              };
              if (v1 instanceof Animated) {
                  return v1.value1(v);
              };
              throw new Error("Failed pattern match at Anim line 55, column 1 - line 55, column 67: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  exports["HasPos"] = HasPos;
  exports["getPos"] = getPos;
  exports["setPos"] = setPos;
  exports["getX"] = getX;
  exports["getY"] = getY;
  exports["current"] = current;
  exports["isMoving"] = isMoving;
  exports["initStatic"] = initStatic;
  exports["moveTo"] = moveTo;
  exports["animate"] = animate;
})(PS["Anim"] = PS["Anim"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.scale = function(t) {
      return function(ctx) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
              return ctx;
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["getCanvasWidth"] = $foreign.getCanvasWidth;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["beginPath"] = $foreign.beginPath;
  exports["closePath"] = $foreign.closePath;
  exports["fillRect"] = $foreign.fillRect;
  exports["clearRect"] = $foreign.clearRect;
  exports["scale"] = $foreign.scale;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Anim = PS["Anim"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Vect = PS["Vect"];
  var hasPosBlock = new Anim.HasPos(function (v) {
      return v.pos;
  }, function (p) {
      return function (v) {
          var $7 = {};
          for (var $8 in v) {
              if ({}.hasOwnProperty.call(v, $8)) {
                  $7[$8] = v[$8];
              };
          };
          $7.pos = p;
          return $7;
      };
  });
  var draw = function (ctx) {
      return function (v) {
          var rect = {
              x: v.pos.value0,
              y: v.pos.value1,
              w: v.width,
              h: v.height
          };
          return function __do() {
              Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.beginPath(ctx))();
              Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.setFillStyle(v.color)(ctx))();
              Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.fillRect(ctx)(rect))();
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.closePath(ctx))();
          };
      };
  };
  var create = function (col) {
      return function (wdt) {
          return function (hgt) {
              return function (val) {
                  return function (p) {
                      return Anim.initStatic({
                          color: col,
                          width: wdt,
                          height: hgt,
                          value: val,
                          pos: p
                      });
                  };
              };
          };
      };
  };
  exports["create"] = create;
  exports["draw"] = draw;
  exports["hasPosBlock"] = hasPosBlock;
})(PS["Block"] = PS["Block"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Prelude = PS["Prelude"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var foldl1 = function (dictFoldable) {
      return function (f) {
          return function (v) {
              return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
          };
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["foldl1"] = foldl1;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();                                                                                                 
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
    "use strict";
  var Anim = PS["Anim"];
  var Block = PS["Block"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Vect = PS["Vect"];        
  var MoveLeft = (function () {
      function MoveLeft() {

      };
      MoveLeft.value = new MoveLeft();
      return MoveLeft;
  })();
  var MoveRight = (function () {
      function MoveRight() {

      };
      MoveRight.value = new MoveRight();
      return MoveRight;
  })();
  var MoveUp = (function () {
      function MoveUp() {

      };
      MoveUp.value = new MoveUp();
      return MoveUp;
  })();
  var MoveDown = (function () {
      function MoveDown() {

      };
      MoveDown.value = new MoveDown();
      return MoveDown;
  })();
  var Ticked = (function () {
      function Ticked(value0) {
          this.value0 = value0;
      };
      Ticked.create = function (value0) {
          return new Ticked(value0);
      };
      return Ticked;
  })();
  var view = function (ctx) {
      return function (game) {
          return function __do() {
              Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.clearRect(ctx)({
                  x: 0.0,
                  y: 0.0,
                  w: 4.0,
                  h: 4.0
              }))();
              return Block.draw(ctx)(Anim.current(game.block))();
          };
      };
  };
  var speed = 10.0 / 1000.0;
  var update = function (v) {
      return function (game) {
          if (v instanceof MoveRight) {
              if (Anim.isMoving(game.block)) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(game);
              };
              if (Data_Boolean.otherwise) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                      var $8 = {};
                      for (var $9 in game) {
                          if ({}.hasOwnProperty.call(game, $9)) {
                              $8[$9] = game[$9];
                          };
                      };
                      $8.block = Anim.moveTo(Block.hasPosBlock)(speed)(new Vect.Vect(3.0, Anim.getY(Block.hasPosBlock)(Anim.current(game.block))))(game.block);
                      return $8;
                  })());
              };
          };
          if (v instanceof MoveLeft) {
              if (Anim.isMoving(game.block)) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(game);
              };
              if (Data_Boolean.otherwise) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                      var $11 = {};
                      for (var $12 in game) {
                          if ({}.hasOwnProperty.call(game, $12)) {
                              $11[$12] = game[$12];
                          };
                      };
                      $11.block = Anim.moveTo(Block.hasPosBlock)(speed)(new Vect.Vect(0.0, Anim.getY(Block.hasPosBlock)(Anim.current(game.block))))(game.block);
                      return $11;
                  })());
              };
          };
          if (v instanceof MoveUp) {
              if (Anim.isMoving(game.block)) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(game);
              };
              if (Data_Boolean.otherwise) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                      var $14 = {};
                      for (var $15 in game) {
                          if ({}.hasOwnProperty.call(game, $15)) {
                              $14[$15] = game[$15];
                          };
                      };
                      $14.block = Anim.moveTo(Block.hasPosBlock)(speed)(new Vect.Vect(Anim.getX(Block.hasPosBlock)(Anim.current(game.block)), 0.0))(game.block);
                      return $14;
                  })());
              };
          };
          if (v instanceof MoveDown) {
              if (Anim.isMoving(game.block)) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(game);
              };
              if (Data_Boolean.otherwise) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                      var $17 = {};
                      for (var $18 in game) {
                          if ({}.hasOwnProperty.call(game, $18)) {
                              $17[$18] = game[$18];
                          };
                      };
                      $17.block = Anim.moveTo(Block.hasPosBlock)(speed)(new Vect.Vect(Anim.getX(Block.hasPosBlock)(Anim.current(game.block)), 3.0))(game.block);
                      return $17;
                  })());
              };
          };
          if (v instanceof Ticked) {
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                  var $20 = {};
                  for (var $21 in game) {
                      if ({}.hasOwnProperty.call(game, $21)) {
                          $20[$21] = game[$21];
                      };
                  };
                  $20.block = Anim.animate(Block.hasPosBlock)(v.value0)(game.block);
                  return $20;
              })());
          };
          throw new Error("Failed pattern match at Game line 42, column 1 - line 42, column 53: " + [ v.constructor.name, game.constructor.name ]);
      };
  };
  var init = {
      block: Block.create("blue")(1.0)(1.0)(2)(new Vect.Vect(0.0, 0.0))
  };
  exports["MoveLeft"] = MoveLeft;
  exports["MoveRight"] = MoveRight;
  exports["MoveUp"] = MoveUp;
  exports["MoveDown"] = MoveDown;
  exports["Ticked"] = Ticked;
  exports["init"] = init;
  exports["update"] = update;
  exports["view"] = view;
})(PS["Game"] = PS["Game"] || {});
(function(exports) {exports.setScore = function (text) {
    return function() {
      document.getElementById('score').innerHTML = text;
    }
  };

  exports.showGameOver = function(zeige) {
    return function() {
      var value = "none";
      if (zeige) { value = "block"; }
      document.getElementById('gameOver').style.display = value;
    }
  };
})(PS["JQuery"] = PS["JQuery"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["JQuery"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_Unit = PS["Data.Unit"];
  exports["setScore"] = $foreign.setScore;
  exports["showGameOver"] = $foreign.showGameOver;
})(PS["JQuery"] = PS["JQuery"] || {});
(function(exports) {// module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };

  exports.merge = function(sig1) {
    return function(sig2) {
      var out = make(sig1.get());
      sig2.subscribe(out.set);
      sig1.subscribe(out.set);
      return out;
    };
  };

  exports.foldp = function(fun) {
    return function(seed) {
      return function(sig) {
        var acc = seed;
        var out = make(acc);
        sig.subscribe(function(val) {
          acc = fun(val)(acc);
          out.set(acc);
        });
        return out;
      };
    };
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  var flippedMap = function (dictFunctor) {
      return Data_Function.flip(Data_Functor.map(dictFunctor));
  };
  exports["flippedMap"] = flippedMap;
  exports["functorSignal"] = functorSignal;
  exports["constant"] = $foreign.constant;
  exports["merge"] = $foreign.merge;
  exports["foldp"] = $foreign.foldp;
  exports["runSignal"] = $foreign.runSignal;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {// module Signal.DOM

  exports.keyPressedP =
    function keyPressedP(constant) {
      return function(keyCode) {
        return function() {
          var out = constant(false);
          window.addEventListener("keydown", function(e) {
            if (e.keyCode === keyCode) out.set(true);
          });
          window.addEventListener("keyup", function(e) {
            if (e.keyCode === keyCode) out.set(false);
          });
          return out;
        };
      };
    };

  exports.animationFrameP =
    function animationFrameP(constant) {
      return function(now) {
        return function() {
          var requestAnimFrame, cancelAnimFrame;
          if (window.requestAnimationFrame) {
            requestAnimFrame = window.requestAnimationFrame;
            cancelAnimFrame = window.cancelAnimationFrame;
          } else if (window.mozRequestAnimationFrame) {
            requestAnimFrame = window.mozRequestAnimationFrame;
            cancelAnimFrame = window.mozCancelAnimationFrame;
          } else if (window.webkitRequestAnimationFrame) {
            requestAnimFrame = window.webkitRequestAnimationFrame;
            cancelAnimFrame = window.webkitCancelAnimationFrame;
          } else if (window.msRequestAnimationFrame) {
            requestAnimFrame = window.msRequestAnimationFrame;
            cancelAnimFrame = window.msCancelAnimationFrame;
          } else if (window.oRequestAnimationFrame) {
            requestAnimFrame = window.oRequestAnimationFrame;
            cancelAnimFrame = window.oCancelAnimationFrame;
          } else {
            requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
            cancelAnimFrame = window.clearTimeout;
          }
          var out = constant(now());
          requestAnimFrame(function tick(t) {
            out.set(t); requestAnimFrame(tick);
          });
          return out;
        };
      };
    };
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {// module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  exports["now"] = $foreign.now;
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Signal.DOM"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var DOM = PS["DOM"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];                     
  var keyPressed = $foreign.keyPressedP(Signal.constant);
  var animationFrame = $foreign.animationFrameP(Signal.constant)(Signal_Time.now);
  exports["animationFrame"] = animationFrame;
  exports["keyPressed"] = keyPressed;
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {// module SignalExt

  // HACK:
  // need to reintroduce this as it's not exportet
  // from the signal module
  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function (sub) {
        subs.push(sub);
        sub(val);
      },
      get: function () { return val; },
      set: function (newval) {
        val = newval;
        subs.forEach(function (sub) { sub(newval); });
      }
    };
    return sig;
  };


  exports.foldEff = function (fun) {
    return function (seed) {
      return function (sig) {
        return function () {
          var acc = seed;
          var out = make(acc);
          sig.subscribe(function (val) {
            acc = fun(val)(acc)();
            out.set(acc);
          });
          return out;
        };
      };
    };
  };
})(PS["SignalExt"] = PS["SignalExt"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["SignalExt"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Signal = PS["Signal"];
  exports["foldEff"] = $foreign.foldEff;
})(PS["SignalExt"] = PS["SignalExt"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var Game = PS["Game"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var JQuery = PS["JQuery"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_DOM = PS["Signal.DOM"];
  var SignalExt = PS["SignalExt"];        
  var runGameLoop = function (ctx) {
      var view = function (game) {
          return function __do() {
              Game.view(ctx)(game)();
              JQuery.showGameOver(false)();
              return JQuery.setScore(Data_Show.show(Data_Show.showInt)(0))();
          };
      };
      var onDown = function (v) {
          return function (v1) {
              if (v1) {
                  return v;
              };
              if (!v1) {
                  return Game.Ticked.create(0.0);
              };
              throw new Error("Failed pattern match at Main line 65, column 5 - line 65, column 27: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
      var mkTickSignal = function __do() {
          var v = Signal_DOM.animationFrame();
          return Signal.flippedMap(Signal.functorSignal)(Signal.foldp(function (n) {
              return function (v1) {
                  return new Data_Tuple.Tuple($$Math.abs(n - v1.value1), n);
              };
          })(new Data_Tuple.Tuple(0.0, 0.0))(v))(function ($40) {
              return Game.Ticked.create(Data_Time_Duration.Milliseconds(Data_Tuple.fst($40)));
          });
      };
      var signals = function __do() {
          var v = Data_Functor.map(Control_Monad_Eff.functorEff)(function (s) {
              return Signal.flippedMap(Signal.functorSignal)(s)(onDown(Game.MoveLeft.value));
          })(Signal_DOM.keyPressed(37))();
          var v1 = Data_Functor.map(Control_Monad_Eff.functorEff)(function (s) {
              return Signal.flippedMap(Signal.functorSignal)(s)(onDown(Game.MoveUp.value));
          })(Signal_DOM.keyPressed(38))();
          var v2 = Data_Functor.map(Control_Monad_Eff.functorEff)(function (s) {
              return Signal.flippedMap(Signal.functorSignal)(s)(onDown(Game.MoveRight.value));
          })(Signal_DOM.keyPressed(39))();
          var v3 = Data_Functor.map(Control_Monad_Eff.functorEff)(function (s) {
              return Signal.flippedMap(Signal.functorSignal)(s)(onDown(Game.MoveDown.value));
          })(Signal_DOM.keyPressed(40))();
          var v4 = mkTickSignal();
          return Data_NonEmpty.foldl1(Data_Foldable.foldableArray)(Signal.merge)(new Data_NonEmpty.NonEmpty(v4, [ v, v1, v2, v3 ]));
      };
      var mkGameSignal = function __do() {
          var v = signals();
          return SignalExt.foldEff(Game.update)(Game.init)(v)();
      };
      return function __do() {
          var v = mkGameSignal();
          return Signal.runSignal(Data_Functor.map(Signal.functorSignal)(view)(v))();
      };
  };
  var calculateScaling = function (canvas) {
      return function __do() {
          var v = Graphics_Canvas.getCanvasWidth(canvas)();
          var v1 = Graphics_Canvas.getCanvasHeight(canvas)();
          return {
              scaleX: v / 4.0,
              scaleY: v1 / 4.0
          };
      };
  };
  var main = Data_Functor["void"](Control_Monad_Eff.functorEff)(function __do() {
      var v = Graphics_Canvas.getCanvasElementById("canvas")();
      var __unused = function (dictPartial1) {
          return function ($dollar18) {
              return $dollar18;
          };
      };
      return __unused()((function () {
          if (v instanceof Data_Maybe.Just) {
              return function __do() {
                  var v1 = Graphics_Canvas.getContext2D(v.value0)();
                  var v2 = calculateScaling(v.value0)();
                  var v3 = Graphics_Canvas.scale(v2)(v1)();
                  return runGameLoop(v1)();
              };
          };
          throw new Error("Failed pattern match at Main line 26, column 5 - line 27, column 5: " + [ v.constructor.name ]);
      })())();
  });
  exports["main"] = main;
  exports["runGameLoop"] = runGameLoop;
  exports["calculateScaling"] = calculateScaling;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
