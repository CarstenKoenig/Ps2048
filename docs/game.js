// Generated by purs bundle 0.11.7
var PS = {};
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };                                    
  var eqNumber = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindArray"] = bindArray;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  };                                                         
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.intAdd = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x + y | 0;
    };
  };

  exports.intMul = function (x) {
    return function (y) {
      /* jshint bitwise: false */
      return x * y | 0;
    };
  };
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                            
  var semiringInt = new Semiring($foreign.intAdd, $foreign.intMul, 1, 0);
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
  exports["semiringInt"] = semiringInt;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  }; 
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 123, column 3 - line 126, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 114, column 3 - line 117, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["min"] = min;
  exports["max"] = max;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];        
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                         
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidArray"] = monoidArray;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 219, column 1 - line 219, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var alaF = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictNewtype) {
              return function (dictNewtype1) {
                  return function (v) {
                      return function (f) {
                          return function ($64) {
                              return Data_Functor.map(dictFunctor1)(unwrap(dictNewtype1))(f(Data_Functor.map(dictFunctor)(wrap(dictNewtype))($64)));
                          };
                      };
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["alaF"] = alaF;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Milliseconds = function (x) {
      return x;
  };
  exports["Milliseconds"] = Milliseconds;
})(PS["Data.Time.Duration"] = PS["Data.Time.Duration"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Prelude = PS["Prelude"];        
  var Static = (function () {
      function Static(value0) {
          this.value0 = value0;
      };
      Static.create = function (value0) {
          return new Static(value0);
      };
      return Static;
  })();
  var Animated = (function () {
      function Animated(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Animated.create = function (value0) {
          return function (value1) {
              return new Animated(value0, value1);
          };
      };
      return Animated;
  })();
  var Animable = function (animate, isRunning) {
      this.animate = animate;
      this.isRunning = isRunning;
  };
  var isRunning = function (dict) {
      return dict.isRunning;
  };
  var functorAnim = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Static) {
              return new Static(f(m.value0));
          };
          if (m instanceof Animated) {
              return new Animated(f(m.value0), Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(functorAnim)(f))(m.value1));
          };
          throw new Error("Failed pattern match at Anim line 20, column 8 - line 20, column 44: " + [ m.constructor.name ]);
      };
  });
  var fromCont = Animated.create;
  var current = function (v) {
      if (v instanceof Static) {
          return v.value0;
      };
      if (v instanceof Animated) {
          return v.value0;
      };
      throw new Error("Failed pattern match at Anim line 42, column 1 - line 42, column 34: " + [ v.constructor.name ]);
  };
  var applyAnim = new Control_Apply.Apply(function () {
      return functorAnim;
  }, function (v) {
      return function (v1) {
          if (v instanceof Static && v1 instanceof Static) {
              return new Static(v.value0(v1.value0));
          };
          if (v instanceof Animated && v1 instanceof Static) {
              return new Animated(v.value0(v1.value0), function (delta) {
                  return Control_Apply.apply(applyAnim)(v.value1(delta))(v1);
              });
          };
          if (v instanceof Static && v1 instanceof Animated) {
              return new Animated(v.value0(v1.value0), function (delta) {
                  return Control_Apply.apply(applyAnim)(v)(v1.value1(delta));
              });
          };
          if (v instanceof Animated && v1 instanceof Animated) {
              return new Animated(v.value0(v1.value0), function (delta) {
                  return Control_Apply.apply(applyAnim)(v.value1(delta))(v1.value1(delta));
              });
          };
          throw new Error("Failed pattern match at Anim line 23, column 1 - line 23, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeAnim = new Control_Applicative.Applicative(function () {
      return applyAnim;
  }, Static.create);
  var animate = function (dict) {
      return dict.animate;
  };
  var animAnimable = new Animable(function (v) {
      return function (v1) {
          if (v1 instanceof Static) {
              return v1;
          };
          if (v1 instanceof Animated) {
              return v1.value1(v);
          };
          throw new Error("Failed pattern match at Anim line 34, column 1 - line 34, column 43: " + [ v.constructor.name, v1.constructor.name ]);
      };
  }, function (v) {
      if (v instanceof Static) {
          return false;
      };
      if (v instanceof Animated) {
          return true;
      };
      throw new Error("Failed pattern match at Anim line 34, column 1 - line 34, column 43: " + [ v.constructor.name ]);
  });
  exports["Animable"] = Animable;
  exports["animate"] = animate;
  exports["isRunning"] = isRunning;
  exports["current"] = current;
  exports["fromCont"] = fromCont;
  exports["functorAnim"] = functorAnim;
  exports["applyAnim"] = applyAnim;
  exports["applicativeAnim"] = applicativeAnim;
  exports["animAnimable"] = animAnimable;
})(PS["Anim"] = PS["Anim"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";         

  exports.infinity = Infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Global"];
  exports["infinity"] = $foreign.infinity;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.floor = Math.floor;

  exports.round = Math.round;

  exports.sqrt = Math.sqrt;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["floor"] = $foreign.floor;
  exports["round"] = $foreign.round;
  exports["sqrt"] = $foreign.sqrt;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];      
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 64, column 1 - line 64, column 29: " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  var floor = function ($24) {
      return unsafeClamp($$Math.floor($24));
  };
  exports["fromNumber"] = fromNumber;
  exports["floor"] = floor;
  exports["round"] = round;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Anim = PS["Anim"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Prelude = PS["Prelude"];        
  var Color = (function () {
      function Color(value0) {
          this.value0 = value0;
      };
      Color.create = function (value0) {
          return new Color(value0);
      };
      return Color;
  })();
  var HasColor = function (getColor, setColor) {
      this.getColor = getColor;
      this.setColor = setColor;
  };
  var toCssColor = function (v) {
      return "rgb(" + (Data_Show.show(Data_Show.showInt)(Data_Int.round(v.value0.r)) + ("," + (Data_Show.show(Data_Show.showInt)(Data_Int.round(v.value0.g)) + ("," + (Data_Show.show(Data_Show.showInt)(Data_Int.round(v.value0.b)) + ")")))));
  };
  var setColor = function (dict) {
      return dict.setColor;
  };
  var interpolate = function (v) {
      return function (v1) {
          return function (t) {
              var inter = function (a) {
                  return function (b) {
                      return a + (b - a) * t;
                  };
              };
              return new Color({
                  r: inter(v.value0.r)(v1.value0.r),
                  g: inter(v.value0.g)(v1.value0.g),
                  b: inter(v.value0.b)(v1.value0.b)
              });
          };
      };
  };
  var getColor = function (dict) {
      return dict.getColor;
  };
  var eqColor = new Data_Eq.Eq(function (x) {
      return function (y) {
          return x.value0.b === y.value0.b && x.value0.g === y.value0.g && x.value0.r === y.value0.r;
      };
  });
  var create = function (r) {
      return function (g) {
          return function (b) {
              return new Color({
                  r: Data_Int.toNumber(r),
                  g: Data_Int.toNumber(g),
                  b: Data_Int.toNumber(b)
              });
          };
      };
  };
  var colorHasColor = new HasColor(Control_Category.id(Control_Category.categoryFn), Data_Function["const"]);
  var changeColorTo = function (dictHasColor) {
      return function (v) {
          return function (toColor) {
              return function (anim) {
                  if (Data_Eq.eq(eqColor)(getColor(dictHasColor)(Anim.current(anim)))(toColor)) {
                      return Control_Applicative.pure(Anim.applicativeAnim)(Anim.current(anim));
                  };
                  if (Data_Boolean.otherwise) {
                      var obj = Anim.current(anim);
                      var startColor = getColor(dictHasColor)(obj);
                      var colorTo = function (curObj) {
                          return function (lastTime) {
                              return function (v1) {
                                  var time = Data_Ord.min(Data_Ord.ordNumber)(v)(lastTime + v1);
                                  var nextColor = interpolate(startColor)(toColor)(time / v);
                                  var nextObj = setColor(dictHasColor)(nextColor)(curObj);
                                  var $27 = time < v;
                                  if ($27) {
                                      return Anim.fromCont(nextObj)(colorTo(nextObj)(time));
                                  };
                                  return Control_Applicative.pure(Anim.applicativeAnim)(setColor(dictHasColor)(toColor)(curObj));
                              };
                          };
                      };
                      return Anim.fromCont(obj)(colorTo(obj)(0.0));
                  };
                  throw new Error("Failed pattern match at AnimColor line 59, column 1 - line 59, column 84: " + [ v.constructor.name, toColor.constructor.name, anim.constructor.name ]);
              };
          };
      };
  };
  exports["create"] = create;
  exports["toCssColor"] = toCssColor;
  exports["HasColor"] = HasColor;
  exports["getColor"] = getColor;
  exports["setColor"] = setColor;
  exports["changeColorTo"] = changeColorTo;
  exports["eqColor"] = eqColor;
  exports["colorHasColor"] = colorHasColor;
})(PS["AnimColor"] = PS["AnimColor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];        
  var Vect = (function () {
      function Vect(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Vect.create = function (value0) {
          return function (value1) {
              return new Vect(value0, value1);
          };
      };
      return Vect;
  })();
  var vLength = function (v) {
      return $$Math.sqrt(v.value0 * v.value0 + v.value1 * v.value1);
  };
  var vDiff = function (v) {
      return function (v1) {
          return new Vect(v.value0 - v1.value0, v.value1 - v1.value1);
      };
  };
  var vAdd = function (v) {
      return function (v1) {
          return new Vect(v.value0 + v1.value0, v.value1 + v1.value1);
      };
  };
  var scalMul = function (s) {
      return function (v) {
          return new Vect(s * v.value0, s * v.value1);
      };
  }; 
  var dist = function (v1) {
      return function (v2) {
          return vLength(vDiff(v1)(v2));
      };
  };
  var isNear = function (v1) {
      return function (v2) {
          return dist(v1)(v2) <= 1.0e-3;
      };
  };
  var direction = function (v1) {
      return function (v2) {
          var dir = vDiff(v2)(v1);
          return scalMul(1.0 / vLength(dir))(dir);
      };
  };
  exports["Vect"] = Vect;
  exports["direction"] = direction;
  exports["isNear"] = isNear;
  exports["dist"] = dist;
  exports["vAdd"] = vAdd;
  exports["vDiff"] = vDiff;
  exports["scalMul"] = scalMul;
  exports["vLength"] = vLength;
})(PS["Vect"] = PS["Vect"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Anim = PS["Anim"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Prelude = PS["Prelude"];
  var Vect = PS["Vect"];        
  var HasPos = function (getPos, setPos) {
      this.getPos = getPos;
      this.setPos = setPos;
  };
  var vectHasPos = new HasPos(Control_Category.id(Control_Category.categoryFn), Data_Function["const"]);
  var setPos = function (dict) {
      return dict.setPos;
  };
  var getPos = function (dict) {
      return dict.getPos;
  };
  var moveTo = function (dictHasPos) {
      return function (maxSpeed) {
          return function (toPos) {
              return function (anim) {
                  if (Vect.isNear(getPos(dictHasPos)(Anim.current(anim)))(toPos)) {
                      var obj = Anim.current(anim);
                      return Control_Applicative.pure(Anim.applicativeAnim)(obj);
                  };
                  if (Data_Boolean.otherwise) {
                      var obj = Anim.current(anim);
                      var moveTo1 = function (curObj) {
                          return function (lastSpeed) {
                              return function (lastDir) {
                                  return function (v) {
                                      var speed = Data_Ord.max(Data_Ord.ordNumber)(maxSpeed)(lastSpeed + maxSpeed / 20.0);
                                      var nextPos = Vect.vAdd(getPos(dictHasPos)(curObj))(Vect.scalMul(v * speed)(lastDir));
                                      var nextObj = setPos(dictHasPos)(nextPos)(curObj);
                                      var newDir = Vect.direction(nextPos)(toPos);
                                      var $19 = Vect.isNear(newDir)(lastDir);
                                      if ($19) {
                                          return Anim.fromCont(nextObj)(moveTo1(nextObj)(speed)(lastDir));
                                      };
                                      return Control_Applicative.pure(Anim.applicativeAnim)(setPos(dictHasPos)(toPos)(curObj));
                                  };
                              };
                          };
                      };
                      return Anim.fromCont(obj)(moveTo1(obj)(0.0)(Vect.direction(getPos(dictHasPos)(obj))(toPos)));
                  };
                  throw new Error("Failed pattern match at AnimPos line 38, column 1 - line 38, column 66: " + [ maxSpeed.constructor.name, toPos.constructor.name, anim.constructor.name ]);
              };
          };
      };
  };
  exports["HasPos"] = HasPos;
  exports["getPos"] = getPos;
  exports["setPos"] = setPos;
  exports["moveTo"] = moveTo;
  exports["vectHasPos"] = vectHasPos;
})(PS["AnimPos"] = PS["AnimPos"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var AnimPos = PS["AnimPos"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Int = PS["Data.Int"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];
  var Vect = PS["Vect"];        
  var create = function (width) {
      return function (height) {
          var bW = width / 4.0;
          var bH = height / 4.0;
          return {
              canvasWidth: width,
              canvasHeight: height,
              blockWidth: bW,
              blockHeight: bH,
              speed: (1.25 * width) / 1000.0,
              toPos: function (col) {
                  return function (row) {
                      return new Vect.Vect(Data_Int.toNumber(col) * bW, Data_Int.toNumber(row) * bH);
                  };
              }
          };
      };
  };
  exports["create"] = create;
})(PS["DrawParams"] = PS["DrawParams"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.beginPath = function(ctx) {
      return function() {
          ctx.beginPath();
          return ctx;
      };
  };

  exports.closePath = function(ctx) {
      return function() {
          ctx.closePath();
          return ctx;
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.scale = function(t) {
      return function(ctx) {
          return function() {
              ctx.scale(t.scaleX, t.scaleY);
              return ctx;
          };
      };
  };

  exports.clearRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.clearRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };

  exports.setTextAlignImpl = function(ctx) {
      return function(textAlign) {
          return function() {
              ctx.textAlign = textAlign;
              return ctx;
          }
      }
  };

  exports.font = function(ctx) {
      return function() {
          return ctx.font;
      };
  };

  exports.setFont = function(fontspec) {
      return function(ctx) {
          return function() {
              ctx.font = fontspec;
              return ctx;
          };
      };
  };

  exports.fillText = function(ctx) {
      return function(text) {
          return function(x) {
              return function(y) {
                  return function() {
                      ctx.fillText(text, x, y);
                      return ctx;
                  };
              };
          };
      };
  };

  exports.measureText = function(ctx) {
      return function(text) {
          return function() {
              return ctx.measureText(text);
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var AlignLeft = (function () {
      function AlignLeft() {

      };
      AlignLeft.value = new AlignLeft();
      return AlignLeft;
  })();
  var AlignRight = (function () {
      function AlignRight() {

      };
      AlignRight.value = new AlignRight();
      return AlignRight;
  })();
  var AlignCenter = (function () {
      function AlignCenter() {

      };
      AlignCenter.value = new AlignCenter();
      return AlignCenter;
  })();
  var AlignStart = (function () {
      function AlignStart() {

      };
      AlignStart.value = new AlignStart();
      return AlignStart;
  })();
  var AlignEnd = (function () {
      function AlignEnd() {

      };
      AlignEnd.value = new AlignEnd();
      return AlignEnd;
  })();
  var setTextAlign = function (ctx) {
      return function (textalign) {
          var toString = function (v) {
              if (v instanceof AlignLeft) {
                  return "left";
              };
              if (v instanceof AlignRight) {
                  return "right";
              };
              if (v instanceof AlignCenter) {
                  return "center";
              };
              if (v instanceof AlignStart) {
                  return "start";
              };
              if (v instanceof AlignEnd) {
                  return "end";
              };
              throw new Error("Failed pattern match at Graphics.Canvas line 519, column 5 - line 520, column 5: " + [ v.constructor.name ]);
          };
          return $foreign.setTextAlignImpl(ctx)(toString(textalign));
      };
  };
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  exports["AlignLeft"] = AlignLeft;
  exports["AlignRight"] = AlignRight;
  exports["AlignCenter"] = AlignCenter;
  exports["AlignStart"] = AlignStart;
  exports["AlignEnd"] = AlignEnd;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["setTextAlign"] = setTextAlign;
  exports["getContext2D"] = $foreign.getContext2D;
  exports["getCanvasWidth"] = $foreign.getCanvasWidth;
  exports["getCanvasHeight"] = $foreign.getCanvasHeight;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["beginPath"] = $foreign.beginPath;
  exports["closePath"] = $foreign.closePath;
  exports["fillRect"] = $foreign.fillRect;
  exports["clearRect"] = $foreign.clearRect;
  exports["scale"] = $foreign.scale;
  exports["setFont"] = $foreign.setFont;
  exports["fillText"] = $foreign.fillText;
  exports["measureText"] = $foreign.measureText;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Anim = PS["Anim"];
  var AnimColor = PS["AnimColor"];
  var AnimPos = PS["AnimPos"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var DrawParams = PS["DrawParams"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Vect = PS["Vect"];        
  var Block = function (x) {
      return x;
  };
  var valueToColor = function (v) {
      if (v === 2) {
          return AnimColor.create(244)(67)(54);
      };
      if (v === 4) {
          return AnimColor.create(234)(30)(99);
      };
      if (v === 8) {
          return AnimColor.create(156)(39)(156);
      };
      if (v === 16) {
          return AnimColor.create(103)(58)(183);
      };
      if (v === 32) {
          return AnimColor.create(33)(150)(243);
      };
      if (v === 64) {
          return AnimColor.create(0)(150)(136);
      };
      if (v === 128) {
          return AnimColor.create(139)(195)(74);
      };
      if (v === 256) {
          return AnimColor.create(60)(175)(80);
      };
      if (v === 512) {
          return AnimColor.create(255)(152)(0);
      };
      if (v === 1024) {
          return AnimColor.create(255)(87)(34);
      };
      if (v === 2048) {
          return AnimColor.create(121)(85)(72);
      };
      return AnimColor.create(0)(0)(0);
  };
  var value = function (v) {
      return v.value;
  };
  var sameValue = function (v) {
      return function (v1) {
          return v.value === v1.value;
      };
  };
  var move = function (params) {
      return function (col) {
          return function (row) {
              return function (value1) {
                  return function (v) {
                      var toPos = params.toPos(col)(row);
                      return Block((function () {
                          var $24 = {};
                          for (var $25 in v) {
                              if ({}.hasOwnProperty.call(v, $25)) {
                                  $24[$25] = v[$25];
                              };
                          };
                          $24.pos = AnimPos.moveTo(AnimPos.vectHasPos)(params.speed)(toPos)(v.pos);
                          $24.color = AnimColor.changeColorTo(AnimColor.colorHasColor)(300.0)(valueToColor(value1))(v.color);
                          $24.value = value1;
                          return $24;
                      })());
                  };
              };
          };
      };
  };
  var draw = function (params) {
      return function (ctx) {
          return function (v) {
              var v1 = Anim.current(v.pos);
              var rect = {
                  x: v1.value0,
                  y: v1.value1,
                  w: params.blockWidth,
                  h: params.blockHeight
              };
              return function __do() {
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.beginPath(ctx))();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.setFillStyle(AnimColor.toCssColor(Anim.current(v.color)))(ctx))();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.fillRect(ctx)(rect))();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.closePath(ctx))();
                  var text = Data_Show.show(Data_Show.showInt)(v.value);
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.setFont("10px Arial")(ctx))();
                  var v2 = Data_Functor.map(Control_Monad_Eff.functorEff)(function (v2) {
                      return v2.width;
                  })(Graphics_Canvas.measureText(ctx)(text))();
                  var adjusted = (6.0 * params.blockWidth) / v2;
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.setFont(Data_Show.show(Data_Show.showNumber)(adjusted) + "px Arial")(ctx))();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.setFillStyle("white")(ctx))();
                  var v3 = Data_Functor.map(Control_Monad_Eff.functorEff)(function (v3) {
                      return v3.width;
                  })(Graphics_Canvas.measureText(ctx)("M"))();
                  Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.setTextAlign(ctx)(Graphics_Canvas.AlignCenter.value))();
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.fillText(ctx)(text)(v1.value0 + params.blockWidth / 2.0)(v1.value1 + params.blockWidth / 2.0 + v3 / 2.4))();
              };
          };
      };
  };
  var create = function (params) {
      return function (val) {
          return function (x) {
              return function (y) {
                  return {
                      value: val,
                      pos: Control_Applicative.pure(Anim.applicativeAnim)(params.toPos(x)(y)),
                      color: Control_Applicative.pure(Anim.applicativeAnim)(valueToColor(val))
                  };
              };
          };
      };
  };
  var blockAnimable = new Anim.Animable(function (delta) {
      return function (v) {
          return Block((function () {
              var $37 = {};
              for (var $38 in v) {
                  if ({}.hasOwnProperty.call(v, $38)) {
                      $37[$38] = v[$38];
                  };
              };
              $37.pos = Anim.animate(Anim.animAnimable)(delta)(v.pos);
              $37.color = Anim.animate(Anim.animAnimable)(delta)(v.color);
              return $37;
          })());
      };
  }, function (v) {
      return Anim.isRunning(Anim.animAnimable)(v.pos) || Anim.isRunning(Anim.animAnimable)(v.color);
  });
  exports["Block"] = Block;
  exports["create"] = create;
  exports["value"] = value;
  exports["sameValue"] = sameValue;
  exports["move"] = move;
  exports["draw"] = draw;
  exports["valueToColor"] = valueToColor;
  exports["blockAnimable"] = blockAnimable;
})(PS["Block"] = PS["Block"] || {});
(function(exports) {
    "use strict";

  exports.random = Math.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Random"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Prelude = PS["Prelude"];        
  var randomRange = function (min) {
      return function (max) {
          return function __do() {
              var v = $foreign.random();
              return v * (max - min) + min;
          };
      };
  };
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var v = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * v + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  exports["randomInt"] = randomInt;
  exports["randomRange"] = randomRange;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };

  var replicate = function (count) {
    return function (value) {
      if (count < 1) {
        return [];
      }
      var result = new Array(count);
      return result.fill(value);
    };
  };

  var replicatePolyfill = function (count) {
    return function (value) {
      var result = [];
      var n = 0;
      for (var i = 0; i < count; i++) {
        result[n++] = value;
      }
      return result;
    };
  };

  // In browsers that have Array.prototype.fill we use it, as it's faster.
  exports.replicate = typeof Array.prototype.fill === "function" ?
      replicate :
      replicatePolyfill;

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Conj = function (x) {
      return x;
  };
  var semigroupConj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.conj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var newtypeConj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Conj);
  var monoidConj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupConj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.tt(dictHeytingAlgebra));
  };
  exports["Conj"] = Conj;
  exports["newtypeConj"] = newtypeConj;
  exports["semigroupConj"] = semigroupConj;
  exports["monoidConj"] = monoidConj;
})(PS["Data.Monoid.Conj"] = PS["Data.Monoid.Conj"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Disj = function (x) {
      return x;
  };
  var semigroupDisj = function (dictHeytingAlgebra) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              return Data_HeytingAlgebra.disj(dictHeytingAlgebra)(v)(v1);
          };
      });
  };
  var newtypeDisj = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Disj);
  var monoidDisj = function (dictHeytingAlgebra) {
      return new Data_Monoid.Monoid(function () {
          return semigroupDisj(dictHeytingAlgebra);
      }, Data_HeytingAlgebra.ff(dictHeytingAlgebra));
  };
  exports["Disj"] = Disj;
  exports["newtypeDisj"] = newtypeDisj;
  exports["semigroupDisj"] = semigroupDisj;
  exports["monoidDisj"] = monoidDisj;
})(PS["Data.Monoid.Disj"] = PS["Data.Monoid.Disj"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var sum = function (dictFoldable) {
      return function (dictSemiring) {
          return foldl(dictFoldable)(Data_Semiring.add(dictSemiring))(Data_Semiring.zero(dictSemiring));
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var any = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.newtypeDisj)(Data_Monoid_Disj.Disj)(foldMap(dictFoldable)(Data_Monoid_Disj.monoidDisj(dictHeytingAlgebra)));
      };
  };
  var all = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return Data_Newtype.alaF(Data_Functor.functorFn)(Data_Functor.functorFn)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.newtypeConj)(Data_Monoid_Conj.Conj)(foldMap(dictFoldable)(Data_Monoid_Conj.monoidConj(dictHeytingAlgebra)));
      };
  };
  var and = function (dictFoldable) {
      return function (dictHeytingAlgebra) {
          return all(dictFoldable)(dictHeytingAlgebra)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["traverse_"] = traverse_;
  exports["and"] = and;
  exports["all"] = all;
  exports["any"] = any;
  exports["sum"] = sum;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Prelude = PS["Prelude"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var foldl1 = function (dictFoldable) {
      return function (f) {
          return function (v) {
              return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
          };
      };
  };
  exports["NonEmpty"] = NonEmpty;
  exports["foldl1"] = foldl1;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };                                                                                                    
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var mapWithIndex = function (f) {
      return function (xs) {
          return $foreign.zipWith(f)($foreign.range(0)($foreign.length(xs) - 1 | 0))(xs);
      };
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["concatMap"] = concatMap;
  exports["mapWithIndex"] = mapWithIndex;
  exports["replicate"] = $foreign.replicate;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["reverse"] = $foreign.reverse;
  exports["concat"] = $foreign.concat;
  exports["filter"] = $foreign.filter;
  exports["zipWith"] = $foreign.zipWith;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.toCharCode = function (c) {
    return c.charCodeAt(0);
  };
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Char"];
  exports["toCharCode"] = $foreign.toCharCode;
})(PS["Data.Char"] = PS["Data.Char"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Anim = PS["Anim"];
  var Block = PS["Block"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var DrawParams = PS["DrawParams"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Type_Data_Boolean = PS["Type.Data.Boolean"];        
  var Left = (function () {
      function Left() {

      };
      Left.value = new Left();
      return Left;
  })();
  var Right = (function () {
      function Right() {

      };
      Right.value = new Right();
      return Right;
  })();
  var Up = (function () {
      function Up() {

      };
      Up.value = new Up();
      return Up;
  })();
  var Down = (function () {
      function Down() {

      };
      Down.value = new Down();
      return Down;
  })();
  var Move = (function () {
      function Move(value0) {
          this.value0 = value0;
      };
      Move.create = function (value0) {
          return new Move(value0);
      };
      return Move;
  })();
  var Ticked = (function () {
      function Ticked(value0) {
          this.value0 = value0;
      };
      Ticked.create = function (value0) {
          return new Ticked(value0);
      };
      return Ticked;
  })();
  var Reset = (function () {
      function Reset() {

      };
      Reset.value = new Reset();
      return Reset;
  })();
  var Empty = (function () {
      function Empty() {

      };
      Empty.value = new Empty();
      return Empty;
  })();
  var Single = (function () {
      function Single(value0) {
          this.value0 = value0;
      };
      Single.create = function (value0) {
          return new Single(value0);
      };
      return Single;
  })();
  var Double = (function () {
      function Double(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Double.create = function (value0) {
          return function (value1) {
              return new Double(value0, value1);
          };
      };
      return Double;
  })();
  var Row = (function () {
      function Row(value0) {
          this.value0 = value0;
      };
      Row.create = function (value0) {
          return new Row(value0);
      };
      return Row;
  })();
  var Board = (function () {
      function Board(value0) {
          this.value0 = value0;
      };
      Board.create = function (value0) {
          return new Board(value0);
      };
      return Board;
  })();
  var viewBoard = function (viewVal) {
      return function (v) {
          return function (ctx) {
              var viewCol = function (v1) {
                  if (v1 instanceof Empty) {
                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
                  };
                  if (v1 instanceof Single) {
                      return viewVal(ctx)(v1.value0);
                  };
                  if (v1 instanceof Double) {
                      return function __do() {
                          viewVal(ctx)(v1.value0)();
                          return viewVal(ctx)(v1.value1)();
                      };
                  };
                  throw new Error("Failed pattern match at Game line 201, column 5 - line 202, column 16: " + [ v1.constructor.name ]);
              };
              var viewRow = function (v1) {
                  return Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(viewCol)(v1.value0);
              };
              return Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableArray)(viewRow)(v.value0);
          };
      };
  };
  var view = function (ctx) {
      return function (game) {
          return function __do() {
              Data_Functor["void"](Control_Monad_Eff.functorEff)(Graphics_Canvas.clearRect(ctx)({
                  x: 0.0,
                  y: 0.0,
                  w: game.params.canvasWidth,
                  h: game.params.canvasHeight
              }))();
              return viewBoard(Block.draw(game.params))(game.board)(ctx)();
          };
      };
  };
  var transpose = function (v) {
      var zipRowsWith = function (op) {
          return function (v1) {
              return function (v2) {
                  return Data_Array.zipWith(function (c$prime) {
                      return function (v3) {
                          return new Row(op(c$prime)(v3.value0));
                      };
                  })(v1.value0)(v2.value0);
              };
          };
      };
      return Board.create((function () {
          var v1 = Data_Array.uncons(v.value0);
          if (v1 instanceof Data_Maybe.Nothing) {
              return Data_Array.replicate(4)(new Row([  ]));
          };
          if (v1 instanceof Data_Maybe.Just) {
              return zipRowsWith(Data_Array.cons)(v1.value0.head)(transpose(new Board(v1.value0.tail)));
          };
          throw new Error("Failed pattern match at Game line 275, column 11 - line 277, column 74: " + [ v1.constructor.name ]);
      })());
  };
  var stackRow = function (eqVal) {
      return function (v) {
          var stackLast = function (v1) {
              if (v1.value1 instanceof Data_Maybe.Nothing) {
                  return v1.value0;
              };
              if (v1.value1 instanceof Data_Maybe.Just) {
                  return Data_Array.cons(new Single(v1.value1.value0))(v1.value0);
              };
              throw new Error("Failed pattern match at Game line 318, column 5 - line 318, column 43: " + [ v1.constructor.name ]);
          };
          var fillUp = function (rs) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(Data_Array.replicate(4 - Data_Array.length(rs) | 0)(Empty.value))(rs);
          };
          var cellVal = function (v1) {
              if (v1 instanceof Empty) {
                  return Data_Maybe.Nothing.value;
              };
              if (v1 instanceof Single) {
                  return new Data_Maybe.Just(v1.value0);
              };
              if (v1 instanceof Double) {
                  return new Data_Maybe.Just(v1.value0);
              };
              throw new Error("Failed pattern match at Game line 321, column 5 - line 321, column 28: " + [ v1.constructor.name ]);
          };
          var stackCells = function (left) {
              return function (v1) {
                  var v2 = new Data_Tuple.Tuple(cellVal(left), v1.value1);
                  if (v2.value0 instanceof Data_Maybe.Just && v2.value1 instanceof Data_Maybe.Just) {
                      if (eqVal(v2.value0.value0)(v2.value1.value0)) {
                          return new Data_Tuple.Tuple(Data_Array.cons(new Double(v2.value0.value0, v2.value1.value0))(v1.value0), Data_Maybe.Nothing.value);
                      };
                      if (Data_Boolean.otherwise) {
                          return new Data_Tuple.Tuple(Data_Array.cons(new Single(v2.value1.value0))(v1.value0), new Data_Maybe.Just(v2.value0.value0));
                      };
                  };
                  if (v2.value0 instanceof Data_Maybe.Nothing && v2.value1 instanceof Data_Maybe.Just) {
                      return new Data_Tuple.Tuple(v1.value0, v1.value1);
                  };
                  if (v2.value0 instanceof Data_Maybe.Just && v2.value1 instanceof Data_Maybe.Nothing) {
                      return new Data_Tuple.Tuple(v1.value0, new Data_Maybe.Just(v2.value0.value0));
                  };
                  if (v2.value0 instanceof Data_Maybe.Nothing && v2.value1 instanceof Data_Maybe.Nothing) {
                      return new Data_Tuple.Tuple(v1.value0, Data_Maybe.Nothing.value);
                  };
                  throw new Error("Failed pattern match at Game line 311, column 7 - line 317, column 54: " + [ v2.constructor.name ]);
              };
          };
          return Row.create(fillUp(stackLast(Data_Foldable.foldr(Data_Foldable.foldableArray)(stackCells)(new Data_Tuple.Tuple(Data_Monoid.mempty(Data_Monoid.monoidArray), Data_Maybe.Nothing.value))(v.value0))));
      };
  };
  var stackRight = function (eqVal) {
      return function (v) {
          return Board.create(Data_Functor.map(Data_Functor.functorArray)(stackRow(eqVal))(v.value0));
      };
  };
  var stackBottom = function (eqVal) {
      return function ($275) {
          return transpose(stackRight(eqVal)(transpose($275)));
      };
  };
  var reverse = function (v) {
      var reverseRow = function (v1) {
          return Row.create(Data_Array.reverse(v1.value0));
      };
      return Board.create(Data_Functor.map(Data_Functor.functorArray)(reverseRow)(v.value0));
  };
  var stackLeft = function (eqVal) {
      return function ($276) {
          return reverse(stackRight(eqVal)(reverse($276)));
      };
  };
  var stackTop = function (eqVal) {
      return function ($277) {
          return (function ($278) {
              return transpose(reverse(stackRight(eqVal)($278)));
          })(reverse(transpose($277)));
      };
  };
  var stackMove = function (eqVal) {
      return function (v) {
          if (v instanceof Left) {
              return stackLeft(eqVal);
          };
          if (v instanceof Right) {
              return stackRight(eqVal);
          };
          if (v instanceof Up) {
              return stackTop(eqVal);
          };
          if (v instanceof Down) {
              return stackBottom(eqVal);
          };
          throw new Error("Failed pattern match at Game line 242, column 1 - line 242, column 79: " + [ eqVal.constructor.name, v.constructor.name ]);
      };
  };
  var moveBoardCells = function (params) {
      return function (v) {
          var moveCol = function (v1) {
              return function (v2) {
                  return function (v3) {
                      if (v3 instanceof Empty) {
                          return Empty.value;
                      };
                      if (v3 instanceof Single) {
                          var val = Block.value(v3.value0);
                          return new Single(Block.move(params)(v2)(v1)(val)(v3.value0));
                      };
                      if (v3 instanceof Double) {
                          var val = Block.value(v3.value0) + Block.value(v3.value1) | 0;
                          var mov2 = Block.move(params)(v2)(v1)(val)(v3.value1);
                          var mov1 = Block.move(params)(v2)(v1)(val)(v3.value0);
                          return new Double(mov1, mov2);
                      };
                      throw new Error("Failed pattern match at Game line 217, column 5 - line 218, column 12: " + [ v1.constructor.name, v2.constructor.name, v3.constructor.name ]);
                  };
              };
          };
          var moveRow = function (i) {
              return function (v1) {
                  return Row.create(Data_Array.mapWithIndex(moveCol(i))(v1.value0));
              };
          };
          return Board.create(Data_Array.mapWithIndex(moveRow)(v.value0));
      };
  };
  var mergeScore = function (v) {
      var mergeScoreCell = function (v1) {
          if (v1 instanceof Empty) {
              return 0;
          };
          if (v1 instanceof Single) {
              return 0;
          };
          if (v1 instanceof Double) {
              return Block.value(v1.value0);
          };
          throw new Error("Failed pattern match at Game line 190, column 7 - line 191, column 7: " + [ v1.constructor.name ]);
      };
      var mergeScoreRow = function (v1) {
          return Data_Foldable.sum(Data_Foldable.foldableArray)(Data_Semiring.semiringInt)(Data_Functor.map(Data_Functor.functorArray)(mergeScoreCell)(v1.value0));
      };
      return Data_Foldable.sum(Data_Foldable.foldableArray)(Data_Semiring.semiringInt)(Data_Functor.map(Data_Functor.functorArray)(mergeScoreRow)(v.value0));
  };
  var isValidMove = function (eqVal) {
      return function (dir) {
          return function (v) {
              var sameCell = function (v1) {
                  return function (v2) {
                      if (v1 instanceof Empty && v2 instanceof Empty) {
                          return true;
                      };
                      if (v1 instanceof Single && v2 instanceof Single) {
                          return eqVal(v1.value0)(v2.value0);
                      };
                      if (v1 instanceof Double && v2 instanceof Double) {
                          return eqVal(v1.value0)(v2.value0) && eqVal(v1.value1)(v2.value1);
                      };
                      return false;
                  };
              };
              var sameRow = function (v1) {
                  return function (v2) {
                      return Data_Foldable.and(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Array.zipWith(sameCell)(v1.value0)(v2.value0));
                  };
              };
              var v1 = stackMove(eqVal)(dir)(v);
              return !Data_Foldable.and(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Data_Array.zipWith(sameRow)(v.value0)(v1.value0));
          };
      };
  };
  var insertCell = function (inRow) {
      return function (inCol) {
          return function (val) {
              return function (v) {
                  var insertCell$prime = function (col) {
                      return function (cell) {
                          if (col === inCol) {
                              return new Single(val);
                          };
                          if (Data_Boolean.otherwise) {
                              return cell;
                          };
                          throw new Error("Failed pattern match at Game line 179, column 5 - line 181, column 28: " + [ col.constructor.name, cell.constructor.name ]);
                      };
                  };
                  var insertRow = function (row) {
                      return function (v1) {
                          if (row === inRow) {
                              return Row.create(Data_Array.mapWithIndex(insertCell$prime)(v1.value0));
                          };
                          if (Data_Boolean.otherwise) {
                              return v1;
                          };
                          throw new Error("Failed pattern match at Game line 176, column 5 - line 178, column 25: " + [ row.constructor.name, v1.constructor.name ]);
                      };
                  };
                  return Board.create(Data_Array.mapWithIndex(insertRow)(v.value0));
              };
          };
      };
  };
  var functorCell = new Data_Functor.Functor(function (f) {
      return function (m) {
          if (m instanceof Empty) {
              return Empty.value;
          };
          if (m instanceof Single) {
              return new Single(f(m.value0));
          };
          if (m instanceof Double) {
              return new Double(f(m.value0), f(m.value1));
          };
          throw new Error("Failed pattern match at Game line 299, column 8 - line 299, column 44: " + [ m.constructor.name ]);
      };
  });
  var functorRow = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Row(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(functorCell)(f))(m.value0));
      };
  });
  var functorBoard = new Data_Functor.Functor(function (f) {
      return function (m) {
          return new Board(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(functorRow)(f))(m.value0));
      };
  });
  var freePositions = function (v) {
      var emptyCell = function (i) {
          return function (j) {
              return function (v1) {
                  if (v1 instanceof Empty) {
                      return new Data_Tuple.Tuple(new Data_Tuple.Tuple(i, j), true);
                  };
                  return new Data_Tuple.Tuple(new Data_Tuple.Tuple(i, j), false);
              };
          };
      };
      var emptyCells = function (i) {
          return function (v1) {
              return Data_Array.mapWithIndex(emptyCell(i))(v1.value0);
          };
      };
      return Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.fst)(Data_Array.filter(Data_Tuple.snd)(Data_Array.concat(Data_Array.mapWithIndex(emptyCells)(v.value0))));
  };
  var insertRandom = function (params) {
      return function (v) {
          return function __do() {
              var v1 = Control_Monad_Eff_Random.randomRange(0.0)(1.0)();
              var val = (function () {
                  var $226 = v1 > 0.66;
                  if ($226) {
                      return 4;
                  };
                  return 2;
              })();
              var freePoss = freePositions(v);
              var freeCount = Data_Array.length(freePoss);
              var $227 = freeCount <= 0;
              if ($227) {
                  return Data_Maybe.Nothing.value;
              };
              var v2 = Control_Monad_Eff_Random.randomInt(0)(freeCount - 1 | 0)();
              var v3 = Data_Array.index(freePoss)(v2);
              if (v3 instanceof Data_Maybe.Just) {
                  return Data_Maybe.Just.create(insertCell(v3.value0.value0)(v3.value0.value1)(Block.create(params)(val)(v3.value0.value1)(v3.value0.value0))(v));
              };
              if (v3 instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Game line 154, column 5 - line 157, column 30: " + [ v3.constructor.name ]);
          };
      };
  };
  var eqAnimBlock = Block.sameValue;
  var emptyBoard = (function () {
      var emptyRow = new Row(Data_Array.replicate(4)(Empty.value));
      return new Board(Data_Array.replicate(4)(emptyRow));
  })();
  var randomBoard = function (params) {
      return function __do() {
          var v = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Maybe.fromMaybe(emptyBoard))(insertRandom(params)(emptyBoard))();
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Maybe.fromMaybe(v))(insertRandom(params)(v))();
      };
  };
  var init = function (params) {
      return function __do() {
          var v = randomBoard(params)();
          return {
              params: params,
              board: v,
              animationRunning: false,
              gameOver: false,
              score: 0
          };
      };
  };
  var cellValues = function (v) {
      var getCell = function (v1) {
          if (v1 instanceof Empty) {
              return [  ];
          };
          if (v1 instanceof Single) {
              return [ v1.value0 ];
          };
          if (v1 instanceof Double) {
              return [ v1.value0, v1.value1 ];
          };
          throw new Error("Failed pattern match at Game line 122, column 9 - line 122, column 27: " + [ v1.constructor.name ]);
      };
      var getVals = function (v1) {
          return Data_Array.concatMap(getCell)(v1.value0);
      };
      return Data_Array.concatMap(getVals)(v.value0);
  };
  var foldableBoard = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (inj) {
          return function (board) {
              return Data_Foldable.foldMap(Data_Foldable.foldableArray)(dictMonoid)(inj)(cellValues(board));
          };
      };
  }, function (f) {
      return function (s) {
          return function (board) {
              return Data_Foldable.foldl(Data_Foldable.foldableArray)(f)(s)(cellValues(board));
          };
      };
  }, function (f) {
      return function (s) {
          return function (board) {
              return Data_Foldable.foldr(Data_Foldable.foldableArray)(f)(s)(cellValues(board));
          };
      };
  });
  var boardAnimable = function (dictAnimable) {
      return new Anim.Animable(function (delta) {
          return Data_Functor.map(functorBoard)(Anim.animate(dictAnimable)(delta));
      }, Data_Foldable.any(foldableBoard)(Data_HeytingAlgebra.heytingAlgebraBoolean)(Anim.isRunning(dictAnimable)));
  };
  var update = function (v) {
      return function (game) {
          if (v instanceof Move) {
              if (!Anim.isRunning(boardAnimable(Block.blockAnimable))(game.board) && isValidMove(eqAnimBlock)(v.value0)(game.board)) {
                  var board$prime = moveBoardCells(game.params)(stackMove(eqAnimBlock)(v.value0)(game.board));
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                      var $258 = {};
                      for (var $259 in game) {
                          if ({}.hasOwnProperty.call(game, $259)) {
                              $258[$259] = game[$259];
                          };
                      };
                      $258.board = board$prime;
                      $258.animationRunning = true;
                      $258.score = game.score + mergeScore(board$prime) | 0;
                      return $258;
                  })());
              };
              if (Data_Boolean.otherwise) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(game);
              };
          };
          if (v instanceof Ticked) {
              if (Anim.isRunning(boardAnimable(Block.blockAnimable))(game.board)) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)((function () {
                      var $262 = {};
                      for (var $263 in game) {
                          if ({}.hasOwnProperty.call(game, $263)) {
                              $262[$263] = game[$263];
                          };
                      };
                      $262.board = Anim.animate(boardAnimable(Block.blockAnimable))(v.value0)(game.board);
                      return $262;
                  })());
              };
              if (game.animationRunning) {
                  return function __do() {
                      var v1 = insertRandom(game.params)(game.board)();
                      if (v1 instanceof Data_Maybe.Nothing) {
                          var $267 = {};
                          for (var $268 in game) {
                              if ({}.hasOwnProperty.call(game, $268)) {
                                  $267[$268] = game[$268];
                              };
                          };
                          $267.animationRunning = false;
                          $267.gameOver = true;
                          return $267;
                      };
                      if (v1 instanceof Data_Maybe.Just) {
                          var $270 = {};
                          for (var $271 in game) {
                              if ({}.hasOwnProperty.call(game, $271)) {
                                  $270[$271] = game[$271];
                              };
                          };
                          $270.board = v1.value0;
                          $270.animationRunning = false;
                          $270.gameOver = !Data_Foldable.any(Data_Foldable.foldableArray)(Data_HeytingAlgebra.heytingAlgebraBoolean)(function (mv) {
                              return isValidMove(eqAnimBlock)(mv)(v1.value0);
                          })([ Left.value, Right.value, Up.value, Down.value ]);
                          return $270;
                      };
                      throw new Error("Failed pattern match at Game line 83, column 5 - line 91, column 12: " + [ v1.constructor.name ]);
                  };
              };
              if (Data_Boolean.otherwise) {
                  return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(game);
              };
          };
          if (v instanceof Reset) {
              return init(game.params);
          };
          throw new Error("Failed pattern match at Game line 66, column 1 - line 66, column 71: " + [ v.constructor.name, game.constructor.name ]);
      };
  };
  exports["Move"] = Move;
  exports["Ticked"] = Ticked;
  exports["Reset"] = Reset;
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["Up"] = Up;
  exports["Down"] = Down;
  exports["init"] = init;
  exports["update"] = update;
  exports["view"] = view;
  exports["Row"] = Row;
  exports["Empty"] = Empty;
  exports["Single"] = Single;
  exports["Double"] = Double;
  exports["stackRow"] = stackRow;
  exports["functorBoard"] = functorBoard;
  exports["foldableBoard"] = foldableBoard;
  exports["boardAnimable"] = boardAnimable;
  exports["functorRow"] = functorRow;
  exports["functorCell"] = functorCell;
})(PS["Game"] = PS["Game"] || {});
(function(exports) {exports.setScore = function (text) {
    return function() {
      document.getElementById('score').innerHTML = text;
    }
  };

  exports.showGameOver = function(zeige) {
    return function() {
      var value = "none";
      if (zeige) { value = "block"; }
      document.getElementById('gameOver').style.display = value;
    }
  };
})(PS["JQuery"] = PS["JQuery"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["JQuery"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Data_Unit = PS["Data.Unit"];
  exports["setScore"] = $foreign.setScore;
  exports["showGameOver"] = $foreign.showGameOver;
})(PS["JQuery"] = PS["JQuery"] || {});
(function(exports) {// module Signal

  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function(sub) {
        subs.push(sub);
        sub(val);
      },
      get: function() { return val; },
      set: function(newval) {
        val = newval;
        subs.forEach(function(sub) { sub(newval); });
      }
    };
    return sig;
  };

  exports.constant = make;

  exports.mapSig = function(fun) {
    return function(sig) {
      var out = make(fun(sig.get()));
      sig.subscribe(function(val) { out.set(fun(val)); });
      return out;
    };
  };

  exports.merge = function(sig1) {
    return function(sig2) {
      var out = make(sig1.get());
      sig2.subscribe(out.set);
      sig1.subscribe(out.set);
      return out;
    };
  };

  exports.foldp = function(fun) {
    return function(seed) {
      return function(sig) {
        var acc = seed;
        var out = make(acc);
        sig.subscribe(function(val) {
          acc = fun(val)(acc);
          out.set(acc);
        });
        return out;
      };
    };
  };

  exports.runSignal =
    function runSignal(sig) {
      return function() {
        sig.subscribe(function(val) {
          val();
        });
        return {};
      };
    };
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Signal"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];
  var functorSignal = new Data_Functor.Functor($foreign.mapSig);
  var flippedMap = function (dictFunctor) {
      return Data_Function.flip(Data_Functor.map(dictFunctor));
  };
  exports["flippedMap"] = flippedMap;
  exports["functorSignal"] = functorSignal;
  exports["constant"] = $foreign.constant;
  exports["merge"] = $foreign.merge;
  exports["foldp"] = $foreign.foldp;
  exports["runSignal"] = $foreign.runSignal;
})(PS["Signal"] = PS["Signal"] || {});
(function(exports) {// module Signal.DOM

  exports.keyPressedP =
    function keyPressedP(constant) {
      return function(keyCode) {
        return function() {
          var out = constant(false);
          window.addEventListener("keydown", function(e) {
            if (e.keyCode === keyCode) out.set(true);
          });
          window.addEventListener("keyup", function(e) {
            if (e.keyCode === keyCode) out.set(false);
          });
          return out;
        };
      };
    };

  exports.animationFrameP =
    function animationFrameP(constant) {
      return function(now) {
        return function() {
          var requestAnimFrame, cancelAnimFrame;
          if (window.requestAnimationFrame) {
            requestAnimFrame = window.requestAnimationFrame;
            cancelAnimFrame = window.cancelAnimationFrame;
          } else if (window.mozRequestAnimationFrame) {
            requestAnimFrame = window.mozRequestAnimationFrame;
            cancelAnimFrame = window.mozCancelAnimationFrame;
          } else if (window.webkitRequestAnimationFrame) {
            requestAnimFrame = window.webkitRequestAnimationFrame;
            cancelAnimFrame = window.webkitCancelAnimationFrame;
          } else if (window.msRequestAnimationFrame) {
            requestAnimFrame = window.msRequestAnimationFrame;
            cancelAnimFrame = window.msCancelAnimationFrame;
          } else if (window.oRequestAnimationFrame) {
            requestAnimFrame = window.oRequestAnimationFrame;
            cancelAnimFrame = window.oCancelAnimationFrame;
          } else {
            requestAnimFrame = function(cb) {setTimeout(function() {cb(now())}, 1000/60)};
            cancelAnimFrame = window.clearTimeout;
          }
          var out = constant(now());
          requestAnimFrame(function tick(t) {
            out.set(t); requestAnimFrame(tick);
          });
          return out;
        };
      };
    };
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {// module Signal.Time

  function now() {
    var perf = typeof performance !== 'undefined' ? performance : null,
        proc = typeof process !== 'undefined' ? process : null;
    return (
      perf && (perf.now || perf.webkitNow || perf.msNow || perf.oNow || perf.mozNow) ||
      (proc && proc.hrtime && function() {
        var t = proc.hrtime();
        return (t[0] * 1e9 + t[1]) / 1e6;
      }) ||
      Date.now
    ).call(perf);
  };

  exports.now = now;
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Signal.Time"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  exports["now"] = $foreign.now;
})(PS["Signal.Time"] = PS["Signal.Time"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Signal.DOM"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var DOM = PS["DOM"];
  var Data_Function = PS["Data.Function"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_Time = PS["Signal.Time"];                     
  var keyPressed = $foreign.keyPressedP(Signal.constant);
  var animationFrame = $foreign.animationFrameP(Signal.constant)(Signal_Time.now);
  exports["animationFrame"] = animationFrame;
  exports["keyPressed"] = keyPressed;
})(PS["Signal.DOM"] = PS["Signal.DOM"] || {});
(function(exports) {// module SignalExt

  // HACK:
  // need to reintroduce this as it's not exportet
  // from the signal module
  function make(initial) {
    var subs = [];
    var val = initial;
    var sig = {
      subscribe: function (sub) {
        subs.push(sub);
        sub(val);
      },
      get: function () { return val; },
      set: function (newval) {
        val = newval;
        subs.forEach(function (sub) { sub(newval); });
      }
    };
    return sig;
  };


  exports.foldEff = function (fun) {
    return function (seed) {
      return function (sig) {
        return function () {
          var acc = seed;
          var out = make(acc);
          sig.subscribe(function (val) {
            acc = fun(val)(acc)();
            out.set(acc);
          });
          return out;
        };
      };
    };
  };
})(PS["SignalExt"] = PS["SignalExt"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["SignalExt"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Signal = PS["Signal"];
  exports["foldEff"] = $foreign.foldEff;
})(PS["SignalExt"] = PS["SignalExt"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Monad_Eff_Timer = PS["Control.Monad.Eff.Timer"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var Data_Char = PS["Data.Char"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var DrawParams = PS["DrawParams"];
  var Game = PS["Game"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var JQuery = PS["JQuery"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var Signal = PS["Signal"];
  var Signal_DOM = PS["Signal.DOM"];
  var SignalExt = PS["SignalExt"];        
  var runGameLoop = function (params) {
      return function (ctx) {
          var view = function (game) {
              return function __do() {
                  Game.view(ctx)(game)();
                  JQuery.showGameOver(game.gameOver)();
                  return JQuery.setScore(Data_Show.show(Data_Show.showInt)(game.score))();
              };
          };
          var onDown = function (v) {
              return function (v1) {
                  if (v1) {
                      return v;
                  };
                  if (!v1) {
                      return Game.Ticked.create(0.0);
                  };
                  throw new Error("Failed pattern match at Main line 73, column 5 - line 73, column 27: " + [ v.constructor.name, v1.constructor.name ]);
              };
          };
          var mkTickSignal = function __do() {
              var v = Signal_DOM.animationFrame();
              return Signal.flippedMap(Signal.functorSignal)(Signal.foldp(function (n) {
                  return function (v1) {
                      return new Data_Tuple.Tuple($$Math.abs(n - v1.value1), n);
                  };
              })(new Data_Tuple.Tuple(0.0, 0.0))(v))(function ($44) {
                  return Game.Ticked.create(Data_Time_Duration.Milliseconds(Data_Tuple.fst($44)));
              });
          };
          var signals = function __do() {
              var v = Data_Functor.map(Control_Monad_Eff.functorEff)(function (s) {
                  return Signal.flippedMap(Signal.functorSignal)(s)(onDown(new Game.Move(Game.Left.value)));
              })(Signal_DOM.keyPressed(37))();
              var v1 = Data_Functor.map(Control_Monad_Eff.functorEff)(function (s) {
                  return Signal.flippedMap(Signal.functorSignal)(s)(onDown(new Game.Move(Game.Up.value)));
              })(Signal_DOM.keyPressed(38))();
              var v2 = Data_Functor.map(Control_Monad_Eff.functorEff)(function (s) {
                  return Signal.flippedMap(Signal.functorSignal)(s)(onDown(new Game.Move(Game.Right.value)));
              })(Signal_DOM.keyPressed(39))();
              var v3 = Data_Functor.map(Control_Monad_Eff.functorEff)(function (s) {
                  return Signal.flippedMap(Signal.functorSignal)(s)(onDown(new Game.Move(Game.Down.value)));
              })(Signal_DOM.keyPressed(40))();
              var v4 = Data_Functor.map(Control_Monad_Eff.functorEff)(function (s) {
                  return Signal.flippedMap(Signal.functorSignal)(s)(onDown(Game.Reset.value));
              })(Signal_DOM.keyPressed(Data_Char.toCharCode("R")))();
              var v5 = mkTickSignal();
              return Data_NonEmpty.foldl1(Data_Foldable.foldableArray)(Signal.merge)(new Data_NonEmpty.NonEmpty(v5, [ v, v1, v2, v3, v4 ]));
          };
          var mkGameSignal = function __do() {
              var v = signals();
              var v1 = Game.init(params)();
              return SignalExt.foldEff(Game.update)(v1)(v)();
          };
          return function __do() {
              var v = mkGameSignal();
              return Signal.runSignal(Data_Functor.map(Signal.functorSignal)(view)(v))();
          };
      };
  };
  var calculateScaling = function (params) {
      return function (canvas) {
          return function __do() {
              var v = Graphics_Canvas.getCanvasWidth(canvas)();
              var v1 = Graphics_Canvas.getCanvasHeight(canvas)();
              return {
                  scaleX: v / params.canvasWidth,
                  scaleY: v1 / params.canvasHeight
              };
          };
      };
  };
  var main = Data_Functor["void"](Control_Monad_Eff.functorEff)((function (dictPartial) {
      var params = DrawParams.create(400.0)(400.0);
      return function __do() {
          var v = Graphics_Canvas.getCanvasElementById("canvas")();
          var __unused = function (dictPartial1) {
              return function ($dollar20) {
                  return $dollar20;
              };
          };
          return __unused(dictPartial)((function () {
              if (v instanceof Data_Maybe.Just) {
                  return function __do() {
                      var v1 = Graphics_Canvas.getContext2D(v.value0)();
                      var v2 = calculateScaling(params)(v.value0)();
                      var v3 = Graphics_Canvas.scale(v2)(v1)();
                      return runGameLoop(params)(v1)();
                  };
              };
              throw new Error("Failed pattern match at Main line 32, column 3 - line 33, column 3: " + [ v.constructor.name ]);
          })())();
      };
  })());
  exports["main"] = main;
  exports["runGameLoop"] = runGameLoop;
  exports["calculateScaling"] = calculateScaling;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
